// handles gamedata
public class Tiles {
	private String[][] board = new String[9][9];
	private int[] lastTop = new int[9];
	private int lastCol;

	public Tiles() {
		for (int i = 0; i < 9; i++) {
			lastTop[i] = 0;
			for (int j = 0; j < 9; j++) {
				board[i][j] = " ";
			}
		}
	}

	// changes the board data, returns **true** if the selected column **is full**.
	public boolean placeTile(Player p, int column) {
		column -= 1;
		if (lastTop[column] > 8) {
			return true;
		} else {
			board[lastTop[column]][column] = p.symbol();
			lastTop[column]++;
			lastCol = column;
			return false;
		}
	}

	public boolean gameOverCheck(Player p) {
		if(verticalCheck(p) || horizontalCheck(p) || diagonalCheck(p) || diagonalBackCheck(p)) {
			return true;
		} else {
			return false;
		}
		
	}

	private boolean verticalCheck(Player p) {
		int count = 0;
		for (int i = lastTop[lastCol]; i >= 0; i--) {
			if (board[i][lastCol].equals(p.symbol())) {
				count++;
				if (count == 4) {
					p.win();
					return true;
				}
			} else {
				count = 0;
			}
		}
		return false;
	}

	private boolean horizontalCheck(Player p) {
		int count = 0;
		for (int i = 1 ; i <= 9 ; i++) {
			if (board[lastTop[lastCol]][i].equals(p.symbol())) {
				count++;
				if (count == 4) {
					p.win();
					return true;
				}
			} else {
				count = 0;
			}
		}
		return false;
	}

	private boolean diagonalCheck(Player p) {
		int count = 0;
		return false;
	}
	
	private boolean diagonalBackCheck(Player p) {
		return false;
	}

	public String[][] board() {
		return this.board;
	}
}
